<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xyz.ontip.mapper.admin.UserMapper">
    <resultMap id="getAccountInfoListMap" type="xyz.ontip.pojo.dto.AccountInfoListDTO">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="nickname" column="nickname"/>
        <result property="address" column="address"/>
        <result property="recommendCode" column="recommend_code"/>
        <result property="recommendId" column="recommend_id"/>
        <result property="registerTime" column="register_time"/>
        <result property="role" column="role"/>
    </resultMap>

    <select id="getAccountInfoList" resultMap="getAccountInfoListMap">
        SELECT id,
               username,
               nickname,
               address,
               recommend_code,
               recommend_id,
               register_time,
               role
        FROM account
        ORDER BY register_time DESC, id ASC
        LIMIT #{pageSize} OFFSET #{pageSizeIndex}
    </select>

    <select id="getAccountInfoListAll" resultMap="getAccountInfoListMap">
        SELECT id,
               username,
               nickname,
               address,
               recommend_code,
               recommend_id,
               register_time,
               role
        FROM account
        ORDER BY register_time DESC
    </select>

    <delete id="batchDeleteUserByIds" parameterType="java.util.List">
        DELETE FROM account
        WHERE id IN
        <foreach collection="ids" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <select id="searchUserInfoList" resultMap="getAccountInfoListMap">
        SELECT id,
               username,
               nickname,
               address,
               recommend_code,
               recommend_id,
               register_time,
               role
        FROM account
        WHERE
           CAST(id AS CHAR) LIKE CONCAT('%', #{SearchUserInfo.keyWords}, '%')
           OR username LIKE CONCAT('%', #{SearchUserInfo.keyWords}, '%')
           OR address LIKE CONCAT('%', #{SearchUserInfo.keyWords}, '%')
           OR nickName LIKE CONCAT('%', #{SearchUserInfo.keyWords},'%')
           OR DATE_FORMAT(register_time, '%Y-%m-%d') LIKE CONCAT('%', #{SearchUserInfo.keyWords}, '%')
        ORDER BY register_time DESC, id ASC
        LIMIT #{SearchUserInfo.pageSize} OFFSET #{SearchUserInfo.pageSizeIndex};
    </select>

    <select id="getUserInfoById" resultMap="getAccountInfoListMap">
        SELECT id,
               username,
               nickname,
               address,
               recommend_code,
               recommend_id,
               register_time,
               role
        FROM account
        WHERE
            id = #{uId}
    </select>

    <update id="updateAccountInfo">
        UPDATE account
        <set>
            <if test="username != null">username = #{username},</if>
            <if test="role != null">role = #{role},</if>
            <if test="registerTime != null">register_time = #{registerTime},</if>
            <if test="nickname != null">nickname = #{nickname},</if>
            <if test="address != null">address = #{address}</if>
        </set>
        WHERE id = #{id}
    </update>

    <update id="resetPasswordById">
        UPDATE account
            <set>
                password = #{password}
            </set>
    WHERE id = #{id}

    </update>

    <insert id="insertUser">
        insert into account(id, username, password, role, register_time, recommend_id, nickname, address)
        values (#{insertAccountDTO.id,jdbcType=BIGINT},
                #{insertAccountDTO.username,jdbcType=VARCHAR},
                #{insertAccountDTO.password,jdbcType=VARCHAR},
                #{insertAccountDTO.role,jdbcType=VARCHAR},
                #{insertAccountDTO.registerTime,jdbcType=VARCHAR},
                #{insertAccountDTO.recommendId,jdbcType=BIGINT},
                #{insertAccountDTO.nickname,jdbcType=VARCHAR},
                #{insertAccountDTO.address,jdbcType=VARCHAR})
    </insert>
</mapper>